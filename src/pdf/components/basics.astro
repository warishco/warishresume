---
import { intervalToDuration } from 'date-fns';

import { Icon } from '@/components/icon';
import Img from '@/components/img.astro';
import Details from '@/pdf/components/details.astro';
import RenderedContent from '@/pdf/components/rendered-content.astro';
import type { ContextSlice } from '@/types/context';
import type { AsyncEntry } from '@/types/entries';
import { joinNonEmpty } from '@/utils/array';
import { getGlobalContext } from '@/utils/get-global-context';

interface Props {
  /** An entry from the `basics` collection. */
  entry: AsyncEntry<'basics'>;
}

const { entry } = Astro.props;
const { data: basics, body, render } = await entry;

const context = getGlobalContext<ContextSlice<'website' | 'i18n'>>(Astro);
const t = context.i18n.t;

const age = basics.birthdate && intervalToDuration({ start: basics.birthdate, end: new Date() }).years;

const details = [
  age && { label: t('age'), value: t('age_value', { count: age }) },
  basics.email && { label: t('email'), value: `[${basics.email}](mailto:${basics.email})` },
  basics.phone && { label: t('phone'), value: `[${basics.phone}](tel:${basics.phone})` },
  (basics.city || basics.country) && {
    label: t('location'),
    value: joinNonEmpty([basics.city, basics.country], ', '),
  },
  ...(basics.details || []),
].filter(Boolean);
---

<section class="grid gap-4">
  <div class="flex flex-row items-start gap-3">
    {
      basics.image && (
        <Img class="size-16 h-fit rounded-xl" src={basics.image} alt={basics.name} width={200} height={200} />
      )
    }
    <div class="grid">
      <h1 class="text-xl font-black leading-tight text-color-text-title">{basics.name}</h1>
      <h2 class="text-sm font-medium leading-tight text-color-text-title">{basics.label}</h2>
      {
        context.website && (
          <a href={context.website} class="mt-1 w-fit text-sm leading-none text-color-text-primary underline">
            {new URL(context.website).host}
          </a>
        )
      }
    </div>
    <div class="ml-auto flex gap-2.5">
      {
        basics.socials.map((social) => (
          <a
            aria-label={social.label}
            href={social.url}
            class="flex size-7 items-center justify-center rounded bg-color-bg-main"
          >
            <Icon class="size-3 text-color-icon-dark" name={social.icon} />
          </a>
        ))
      }
    </div>
  </div>
  {body.trim().length > 0 && <RenderedContent {render} />}
  {details.length > 0 && <Details {details} />}
</section>
